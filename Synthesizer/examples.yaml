# config.yaml
backend: "mermaid"  # mermaid, graphviz, plantuml, diagrams

generation:
  count: 5
  order: "medium"  # 节点数量：small(8-12), medium(12-16), large(16-20)
  split_arrow: 1   # 分叉箭头数量
  merge_arrow: 1   # 汇聚箭头数量
  branch: 3        # 箭头分叉数量
  nest: 1          # 嵌套子图数量
  density: 1.7    # 边数/点数
  no_edge_label: 0         # 比例：多少比例的边不显示 label（增加 QA 难度）
Disturbance:
  handwritten_style: false    # true/false：使用仿手写字体样式（增加图像解析难度）

Scanned_style:
  enable: false                  # 是否启用扫描风格
  blur_radius: 1.0               # 模糊半径，单位像素（典型范围 0.8 ~ 2.0）
  vignette: 0.3                  # 晕影强度，0 ~ 1，模拟边角阴影
  rotation: 1.5                  # 最大随机旋转角度（度），一般 0 ~ 3 度
  perspective_distortion: true   # 是否开启轻微的仿射/透视扭曲
  # color_tint: "gray"           # 灰度图(gray) 或 背景偏黄(yellowish)
  color_tint: "yellowish"
  noise_level: 0.01              # 加入扫描噪点的强度，典型范围 0 ~ 0.1
  compression_level: 5           # 模拟扫描后压缩，JPEG压缩质量（0-100，低值更模糊）


graph:
  # title 和 description 可以使用占位符，它们将在 main.py 中被替换
  title: "自动流程图 ({scale}) - #{count}"
  description: "该流程图包含 {num_nodes} 个节点，分支箭头节点：{split_arrow}，汇聚箭头节点：{merge_arrow} 分支：{branch}，嵌套：{nest}，密度：{density}，无标签边比例: {no_edge_label_ratio}。"

output:
  path: "/Your/path/{backend}/hard/{backend}.png" # 输出路径和文件名模板
  render: true      # true: 尝试渲染为图片; false: 仅生成描述文件 (.mmd, .puml, .dot)
                    # 对于 diagrams, render=true/false 行为一致，总是生成图片。
                    # 优先级高于Scanned_style

'plantuml': {
  # 将此路径替换为你的 plantuml.jar 的实际路径
  'jar_path': '/Your/path/plantuml-1.2025.3.jar'  # macOS/Linux 示例
}